//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VK {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public partial class VKApiManager {
        
        public class Polls : VKAPIBranch {
            
            private const string API_BRANCH = "polls.{0}";
            
            /// <summary>Создает объект класса <typeparamref name="Polls"/>.</summary>
            public Polls(bool needXml) : 
                    base(needXml) {
                API_URI_BASE_TEMPLATE = String.Format(API_URI_BASE, API_BRANCH);
            }
            
            #region polls.getById
            /// <summary>Возвращает детальную информацию об опросе по его идентификатору.</summary>
            /// <param name="owner_id">идентификатор владельца опроса, информацию о котором необходимо получить</param>
            /// <param name="poll_id">идентификатор опроса, информацию о котором необходимо получить</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getById(System.Int64? owner_id, string poll_id) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@poll_id", poll_id);
                return GetResponse("getById");
            }
            #endregion
            
            #region polls.addVote
            /// <summary>Отдает голос текущего пользователя за выбранный вариант ответа в указанном опросе.</summary>
            /// <param name="owner_id">идентификатор владельца опроса</param>
            /// <param name="poll_id">идентификатор опроса, в котором необходимо проголосовать</param>
            /// <param name="answer_id">идентификатор варианта ответа, за который необходимо проголосовать</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string addVote(System.Int64? owner_id, string poll_id, string answer_id) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@poll_id", poll_id);
                manager.AddValueByName("@answer_id", answer_id);
                return GetResponse("addVote");
            }
            #endregion
            
            #region polls.deleteVote
            /// <summary>Снимает голос текущего пользователя с выбранного варианта ответа в указанном опросе.</summary>
            /// <param name="owner_id">идентификатор владельца опроса</param>
            /// <param name="poll_id">идентификатор опроса, в котором необходимо снять голос</param>
            /// <param name="answer_id">идентификатор варианта ответа, с которого необходимо снять голос</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string deleteVote(System.Int64? owner_id, string poll_id, string answer_id) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@poll_id", poll_id);
                manager.AddValueByName("@answer_id", answer_id);
                return GetResponse("deleteVote");
            }
            #endregion
        }
    }
}
