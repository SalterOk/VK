//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VK {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public partial class VKApiManager {
        
        public class Wall : VKAPIBranch {
            
            private const string API_BRANCH = "wall.{0}";
            
            /// <summary>Создает объект класса <typeparamref name="Wall"/>.</summary>
            public Wall(bool needXml) : 
                    base(needXml) {
                API_URI_BASE_TEMPLATE = String.Format(API_URI_BASE, API_BRANCH);
            }
            
            #region wall.get
            /// <summary>Возвращает список записей со стены пользователя.</summary>
            /// <param name="owner_id">идентификатор пользователя (по умолчанию - текущий пользователь)</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества сообщений</param>
            /// <param name="count">количество сообщений, которое необходимо получить (но не более 100)</param>
            /// <param name="filter">определяет, какие типы сообщений на стене необходимо получить</param>
            /// <param name="extended">1 - будут возвращены три массива wall, profiles, и groups</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string get(System.Int64? owner_id, System.Int32? offset, System.Int32? count, Filter filter, bool? extended) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@offset", offset);
                manager.AddValueByName("@count", count);
                manager.AddValueByName("@filter", filter);
                manager.AddValueByName("@extended", extended);
                return GetResponse("get");
            }
            
            /// <summary>Возвращает список записей со стены пользователя.</summary>
            /// <param name="owner_id">идентификатор пользователя (по умолчанию - текущий пользователь)</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества сообщений</param>
            /// <param name="count">количество сообщений, которое необходимо получить (но не более 100)</param>
            /// <param name="filter">определяет, какие типы сообщений на стене необходимо получить</param>
            /// <param name="extended">1 - будут возвращены три массива wall, profiles, и groups</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string Get(long owner_id, int? offset = null, int? count = null, Filter filter = null, System.Boolean? extended = null) {
                return get(owner_id, offset, count, filter, extended);
            }
            
            /// <summary>Возвращает список записей со стены пользователя.</summary>
            /// <param name="filter">определяет, какие типы сообщений на стене необходимо получить</param>
            /// <param name="extended">1 - будут возвращены три массива wall, profiles, и groups</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества сообщений</param>
            /// <param name="count">количество сообщений, которое необходимо получить (но не более 100)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string Get(Filter filter = null, System.Boolean? extended = null, System.Int32? offset = null, System.Int32? count = null) {
                return get(null, offset, count, filter, extended);
            }
            #endregion
            
            #region wall.getComments
            /// <summary>Возвращает список комментариев к записи на стене пользователя.</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится запись, к которой необходимо получить комментарии</param>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <param name="sort">порядок сортировки комментариев:asc - хронологический
            ///desc - антихронологический </param>
            /// <param name="need_likes">1 - будет возвращено дополнительное поле likes</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества комментариев</param>
            /// <param name="count">количество комментариев, которое необходимо получить (но не более 100)</param>
            /// <param name="preview_length">Количество символов, по которому нужно обрезать комментарии</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getComments(System.Int64? owner_id, System.Int64? post_id, SortOrder? sort, bool? need_likes, System.Int32? offset, System.Int32? count, System.Int32? preview_length) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@post_id", post_id);
                manager.AddValueByName("@sort", sort);
                manager.AddValueByName("@need_likes", need_likes);
                manager.AddValueByName("@offset", offset);
                manager.AddValueByName("@count", count);
                manager.AddValueByName("@preview_length", preview_length);
                return GetResponse("getComments");
            }
            
            /// <summary>Возвращает список комментариев к записи на стене пользователя.</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится запись, к которой необходимо получить комментарии</param>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <param name="sort">порядок сортировки комментариев:asc - хронологический
            ///desc - антихронологический </param>
            /// <param name="need_likes">1 - будет возвращено дополнительное поле likes</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества комментариев</param>
            /// <param name="count">количество комментариев, которое необходимо получить (но не более 100)</param>
            /// <param name="preview_length">Количество символов, по которому нужно обрезать комментарии</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string GetComments(long owner_id, long post_id, SortOrder sort, System.Boolean? need_likes = null, System.Int32? offset = null, System.Int32? count = null, System.Int32? preview_length = null) {
                return getComments(owner_id, post_id, sort, need_likes, offset, count, preview_length);
            }
            
            /// <summary>Возвращает список комментариев к записи на стене пользователя.</summary>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <param name="sort">порядок сортировки комментариев:asc - хронологический
            ///desc - антихронологический </param>
            /// <param name="need_likes">1 - будет возвращено дополнительное поле likes</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества комментариев</param>
            /// <param name="count">количество комментариев, которое необходимо получить (но не более 100)</param>
            /// <param name="preview_length">Количество символов, по которому нужно обрезать комментарии</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string GetComments(long post_id, SortOrder? sort = null, System.Boolean? need_likes = null, System.Int32? offset = null, System.Int32? count = null, System.Int32? preview_length = null) {
                return getComments(null, post_id, sort, need_likes, offset, count, preview_length);
            }
            #endregion
            
            #region wall.getById
            /// <summary>Возвращает список записей со стен пользователей по их идентификаторам.</summary>
            /// <param name="posts">перечисленные через запятую идентификаторы, которые представляют собой идущие через знак подчеркивания id владельцев стен и id самих записей на стене</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			private string getById(IdList posts)
			{
                manager.AddValueByName("@posts", posts);
                return GetResponse("getById");
            }
            
            /// <summary>Возвращает список записей со стен пользователей по их идентификаторам.</summary>
            /// <param name="posts">перечисленные через запятую идентификаторы, которые представляют собой идущие через знак подчеркивания id владельцев стен и id самих записей на стене</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string GetById(IdList posts) {
                return getById(posts);
            }
            #endregion
            
            #region wall.post
            /// <summary>Публикует новую запись на своей или чужой стене.</summary>
            /// <param name="owner_id">идентификатор пользователя, у которого должна быть опубликована запись</param>
            /// <param name="message">текст сообщения (является обязательным, если не задан параметр attachments) </param>
            /// <param name="attachments">список объектов, приложенных к записи и разделённых символом &quot;,&quot;</param>
            /// <param name="services">Список сервисов или сайтов, на которые необходимо экспортировать статус, в случае если пользователь настроил соответствующую опцию</param>
            /// <param name="from_group">Данный параметр учитывается, если owner_id &lt; 0 (статус публикуется на стене группы)</param>
            /// <param name="signed">1 - у статуса, размещенного от имени группы будет добавлена подпись (имя пользователя, разместившего запись), 0 - подписи добавлено не будет</param>
            /// <param name="friends_only">1 - статус будет доступен только друзьям, 0 - всем пользователям</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			private string post(System.Int64? owner_id, string message, Attachments attachments, Services services, bool? from_group, bool? signed, bool? friends_only)
			{
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@message", message);
                manager.AddValueByName("@attachments", attachments);
                manager.AddValueByName("@services", services);
                manager.AddValueByName("@from_group", from_group);
                manager.AddValueByName("@signed", signed);
                manager.AddValueByName("@friends_only", friends_only);
                return GetResponse("post");
            }
            
            /// <summary>Публикует новую запись на своей или чужой стене.</summary>
            /// <param name="owner_id">идентификатор пользователя, у которого должна быть опубликована запись</param>
            /// <param name="message">текст сообщения (является обязательным, если не задан параметр attachments) </param>
            /// <param name="attachments">список объектов, приложенных к записи и разделённых символом &quot;,&quot;</param>
            /// <param name="services">Список сервисов или сайтов, на которые необходимо экспортировать статус, в случае если пользователь настроил соответствующую опцию</param>
            /// <param name="from_group">Данный параметр учитывается, если owner_id &lt; 0 (статус публикуется на стене группы)</param>
            /// <param name="signed">1 - у статуса, размещенного от имени группы будет добавлена подпись (имя пользователя, разместившего запись), 0 - подписи добавлено не будет</param>
            /// <param name="friends_only">1 - статус будет доступен только друзьям, 0 - всем пользователям</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string Post(long owner_id, string message, Attachments attachments = null, Services services = null, System.Boolean? from_group = null, System.Boolean? signed = null, System.Boolean? friends_only = null) {
                return post(owner_id, message, attachments, services, from_group, signed, friends_only);
            }
            
            /// <summary>Публикует новую запись на своей или чужой стене.</summary>
            /// <param name="message">текст сообщения (является обязательным, если не задан параметр attachments) </param>
            /// <param name="attachments">список объектов, приложенных к записи и разделённых символом &quot;,&quot;</param>
            /// <param name="services">Список сервисов или сайтов, на которые необходимо экспортировать статус, в случае если пользователь настроил соответствующую опцию</param>
            /// <param name="from_group">Данный параметр учитывается, если owner_id &lt; 0 (статус публикуется на стене группы)</param>
            /// <param name="signed">1 - у статуса, размещенного от имени группы будет добавлена подпись (имя пользователя, разместившего запись), 0 - подписи добавлено не будет</param>
            /// <param name="friends_only">1 - статус будет доступен только друзьям, 0 - всем пользователям</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			public string Post(string message, Attachments attachments = null, Services services = null, System.Boolean? from_group = null, System.Boolean? signed = null, System.Boolean? friends_only = null)
			{
                return post(null, message, attachments, services, from_group, signed, friends_only);
            }
            #endregion
            
            #region wall.delete
            /// <summary>Удаляет запись со стены пользователя.</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене необходимо удалить запись</param>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string delete(System.Int64? owner_id, System.Int64? post_id) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@post_id", post_id);
                return GetResponse("delete");
            }
            
            /// <summary>Удаляет запись со стены пользователя.</summary>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене необходимо удалить запись</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string Delete(long post_id, System.Int64? owner_id = null) {
                return delete(owner_id, post_id);
            }
            #endregion
            
            #region wall.restore
            /// <summary>Восстанавливает удаленную запись на стене пользователя.</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене необходимо восстановить запись</param>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string restore(System.Int64? owner_id, System.Int64? post_id) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@post_id", post_id);
                return GetResponse("restore");
            }
            
            /// <summary>Восстанавливает удаленную запись на стене пользователя.</summary>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене необходимо восстановить запись</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string Restore(long post_id, System.Int64? owner_id = null) {
                return restore(owner_id, post_id);
            }
            #endregion
            
            #region wall.addComment
            /// <summary>Добавляет комментарий к записи на стене пользователя.</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится запись к которой необходимо добавить комментарий</param>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <param name="text">текст комментария к записи на стене пользователя</param>
            /// <param name="reply_to_cid">идентификатор комментария, ответом на который является добавляемый комментарий</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string addComment(System.Int64? owner_id, System.Int64? post_id, string text, System.Int64? reply_to_cid) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@post_id", post_id);
                manager.AddValueByName("@text", text);
                manager.AddValueByName("@reply_to_cid", reply_to_cid);
                return GetResponse("addComment");
            }
            
            /// <summary>Добавляет комментарий к записи на стене пользователя.</summary>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <param name="text">текст комментария к записи на стене пользователя</param>
            /// <param name="reply_to_cid">идентификатор комментария, ответом на который является добавляемый комментарий</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string AddComment(long post_id, string text, System.Int64? reply_to_cid = null) {
                return addComment(null, post_id, text, reply_to_cid);
            }
            
            /// <summary>Добавляет комментарий к записи на стене пользователя.</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится запись к которой необходимо добавить комментарий</param>
            /// <param name="post_id">идентификатор записи на стене пользователя</param>
            /// <param name="text">текст комментария к записи на стене пользователя</param>
            /// <param name="reply_to_cid">идентификатор комментария, ответом на который является добавляемый комментарий</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string AddComment(long owner_id, long post_id, string text, System.Int64? reply_to_cid = null) {
                return addComment(owner_id, post_id, text, reply_to_cid);
            }
            #endregion
            
            #region wall.deleteComment
            /// <summary>Удаляет комментарий текущего пользователя к записи на своей или чужой стене.</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится комментарий к записи</param>
            /// <param name="cid">идентификатор комментария на стене пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string deleteComment(System.Int64? owner_id, long cid) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@cid", cid);
                return GetResponse("deleteComment");
            }
            
            /// <summary>Удаляет комментарий текущего пользователя к записи на своей или чужой стене.</summary>
            /// <param name="cid">идентификатор комментария на стене пользователя</param>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится комментарий к записи</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string DeleteComment(long cid, System.Int64? owner_id = null) {
                return deleteComment(owner_id, cid);
            }
            #endregion
            
            #region wall.restoreComment
            /// <summary>Восстанавливает комментарий текущего пользователя к записи на своей или чужой стене.</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится комментарий к записи</param>
            /// <param name="cid">идентификатор комментария на стене пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string restoreComment(System.Int64? owner_id, long cid) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@cid", cid);
                return GetResponse("restoreComment");
            }
            
            /// <summary>Восстанавливает комментарий текущего пользователя к записи на своей или чужой стене.</summary>
            /// <param name="cid">идентификатор комментария на стене пользователя</param>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится комментарий к записи</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string RestoreComment(long cid, System.Int64? owner_id = null) {
                return restoreComment(owner_id, cid);
            }
            #endregion
            
            #region wall.addLike
            /// <summary>Добавляет запись на стене пользователя в список</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится запись, которую необходимо добавить в список Мне нравится</param>
            /// <param name="post_id">идентификатор сообщения на стене пользователя, которое необходимо добавить в список Мне нравится</param>
            /// <param name="repost">определяет, необходимо ли опубликовать запись, которая заносится в список Мне нравится, на стене текущего пользователя</param>
            /// <param name="message">комментарий к записи, публикуемой на своей странице (при использовании параметра repost)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			private string addLike(System.Int64? owner_id, System.Int64? post_id, System.Boolean? repost, string message)
			{
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@post_id", post_id);
                manager.AddValueByName("@repost", repost);
                manager.AddValueByName("@message", message);
                return GetResponse("addLike");
            }
            
            /// <summary>Добавляет запись на стене пользователя в список</summary>
            /// <param name="post_id">идентификатор сообщения на стене пользователя, которое необходимо добавить в список Мне нравится</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string AddLike(long post_id) {
                return addLike(null, post_id, null, null);
            }
            
            /// <summary>Добавляет запись на стене пользователя в список</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится запись, которую необходимо добавить в список Мне нравится</param>
            /// <param name="post_id">идентификатор сообщения на стене пользователя, которое необходимо добавить в список Мне нравится</param>
            /// <param name="repost">определяет, необходимо ли опубликовать запись, которая заносится в список Мне нравится, на стене текущего пользователя</param>
            /// <param name="message">комментарий к записи, публикуемой на своей странице (при использовании параметра repost)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string AddLike(long owner_id, long post_id, System.Boolean? repost = null, string message = null) {
                return addLike(owner_id, post_id, repost, message);
            }
            #endregion
            
            #region wall.deleteLike
            /// <summary>Удаляет запись на стене пользователя из списка</summary>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится запись, которую необходимо удалить из списка Мне нравится</param>
            /// <param name="post_id">идентификатор сообщения на стене пользователя, которое необходимо удалить из списка Мне нравится</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string deleteLike(System.Int64? owner_id, System.Int64? post_id) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@post_id", post_id);
                return GetResponse("deleteLike");
            }
            
            /// <summary>Удаляет запись на стене пользователя из списка</summary>
            /// <param name="post_id">идентификатор сообщения на стене пользователя, которое необходимо удалить из списка Мне нравится</param>
            /// <param name="owner_id">идентификатор пользователя, на чьей стене находится запись, которую необходимо удалить из списка Мне нравится</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public string DeleteLike(long post_id, System.Int64? owner_id = null) {
                return deleteLike(owner_id, post_id);
            }
            #endregion
        }
    }
}
