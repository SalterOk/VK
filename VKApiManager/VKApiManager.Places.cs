//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VK {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public partial class VKApiManager {
        
        public class Places : VKAPIBranch {
            
            private const string API_BRANCH = "places.{0}";
            
            /// <summary>Создает объект класса <typeparamref name="Places"/>.</summary>
            public Places(bool needXml) : 
                    base(needXml) {
                API_URI_BASE_TEMPLATE = String.Format(API_URI_BASE, API_BRANCH);
            }
            
            #region places.add
            /// <summary>Добавляет новое место в базу географических мест. Созданное место будет выводиться в поиске по местам только тому, кто его добавил.</summary>
            /// <param name="title">название нового места</param>
            /// <param name="latitude">географическая широта нового места, заданная в градусах (от -90 до 90)</param>
            /// <param name="longitude">географическая долгота нового места, заданная в градусах (от -180 до 180)</param>
            /// <param name="type">идентификатор типа нового места, полученный методом places</param>
            /// <param name="country">идентификатор страны нового места, полученный методом places</param>
            /// <param name="city">идентификатор города нового места, полученный методом places</param>
            /// <param name="address">строка с адресом нового места (например, Невский просп</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string add(string title, string latitude, string longitude, string type, string country, string city, string address) {
                manager.AddValueByName("@title", title);
                manager.AddValueByName("@latitude", latitude);
                manager.AddValueByName("@longitude", longitude);
                manager.AddValueByName("@type", type);
                manager.AddValueByName("@country", country);
                manager.AddValueByName("@city", city);
                manager.AddValueByName("@address", address);
                return GetResponse("add");
            }
            #endregion
            
            #region places.getById
            /// <summary>Возвращает информацию о местах по их идентификаторам.</summary>
            /// <param name="places">перечисленные через запятую идентификаторы мест</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getById(string places) {
                manager.AddValueByName("@places", places);
                return GetResponse("getById");
            }
            #endregion
            
            #region places.search
            /// <summary>Возвращает список мест, найденных по заданным условиям поиска. Поиск производится среди мест, добавленных модераторами сайта и текущим пользователем. Места в списке расположены в порядке увеличения дистанции от исходной точки поиска.</summary>
            /// <param name="latitude">географическая широта точки, в радиусе которой необходимо производить поиск, заданная в градусах (от -90 до 90)</param>
            /// <param name="longitude">географическая долгота точки, в радиусе которой необходимо производить поиск, заданная в градусах (от -180 до 180)</param>
            /// <param name="q">строка поискового запроса</param>
            /// <param name="radius">тип радиуса зоны поиска (от 1 до 4)1 - 100 метров
            ///2 - 800 метров
            ///3 - 6 километров
            ///4 - 50 километров </param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string search(string latitude, string longitude, string q, string radius) {
                manager.AddValueByName("@latitude", latitude);
                manager.AddValueByName("@longitude", longitude);
                manager.AddValueByName("@q", q);
                manager.AddValueByName("@radius", radius);
                return GetResponse("search");
            }
            #endregion
            
            #region places.checkin
            /// <summary>Отмечает пользователя в указанном месте.</summary>
            /// <param name="place_id">идентификатор места</param>
            /// <param name="text">комментарий к отметке длиной до 255 символов (переводы строк не поддерживаются)</param>
            /// <param name="latitude">географическая широта отметки, заданная в градусах (от -90 до 90)</param>
            /// <param name="longitude">географическая долгота отметки, заданная в градусах (от -180 до 180)</param>
            /// <param name="services">Список сервисов или сайтов, на которые необходимо экспортировать отметку, в случае если пользователь настроил соответствующую опцию</param>
            /// <param name="friends_only">1 - отметка будет доступна только друзьям, 0 - всем пользователям</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string checkin(string place_id, string text, string latitude, string longitude, string services, bool? friends_only) {
                manager.AddValueByName("@place_id", place_id);
                manager.AddValueByName("@text", text);
                manager.AddValueByName("@latitude", latitude);
                manager.AddValueByName("@longitude", longitude);
                manager.AddValueByName("@services", services);
                manager.AddValueByName("@friends_only", friends_only);
                return GetResponse("checkin");
            }
            #endregion
            
            #region places.getCheckins
            /// <summary>Возвращает список отметок пользователей в местах, согласно заданным параметрам.</summary>
            /// <param name="latitude">географическая широта исходной точки поиска, заданная в градусах (от -90 до 90)</param>
            /// <param name="longitude">географическая долгота исходной точки поиска, заданная в градусах (от -180 до 180)</param>
            /// <param name="place">идентификатор места</param>
            /// <param name="uid">идентификатор пользователя</param>
            /// <param name="offset">смещение относительно первой отметки для выборки определенного подмножества</param>
            /// <param name="count">количество возвращаемых отметок (максимум 50)</param>
            /// <param name="timestamp">указывает, что нужно вернуть только те отметки, которые были созданы после заданного timestamp</param>
            /// <param name="friends_only">указывает, что следует выводить только отметки друзей, если заданы географические координаты</param>
            /// <param name="need_places">указывает, следует ли возвращать информацию о месте в котором была сделана отметка</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getCheckins(string latitude, string longitude, string place, System.Int64? uid, System.Int32? offset, System.Int32? count, string timestamp, bool? friends_only, string need_places) {
                manager.AddValueByName("@latitude", latitude);
                manager.AddValueByName("@longitude", longitude);
                manager.AddValueByName("@place", place);
                manager.AddValueByName("@uid", uid);
                manager.AddValueByName("@offset", offset);
                manager.AddValueByName("@count", count);
                manager.AddValueByName("@timestamp", timestamp);
                manager.AddValueByName("@friends_only", friends_only);
                manager.AddValueByName("@need_places", need_places);
                return GetResponse("getCheckins");
            }
            #endregion
            
            #region places.getTypes
            /// <summary>Возвращает список всех возможных типов мест.</summary>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getTypes() {
                return GetResponse("getTypes");
            }
            #endregion
            
            #region places.getCountries
            /// <summary>Возвращает список стран.</summary>
            /// <param name="need_full">определяет, требуется ли в ответе выдавать полный список стран</param>
            /// <param name="code">перечисленные через запятую двухбуквенные коды стран в стандарте ISO 3166-1 alpha-2, для которых необходимо выдать информацию</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getCountries(string need_full, string code) {
                manager.AddValueByName("@need_full", need_full);
                manager.AddValueByName("@code", code);
                return GetResponse("getCountries");
            }
            #endregion
            
            #region places.getCities
            /// <summary>Возвращает список городов.</summary>
            /// <param name="country">идентификатор страны, полученый в методе places</param>
            /// <param name="q">строка поискового запроса</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getCities(string country, string q) {
                manager.AddValueByName("@country", country);
                manager.AddValueByName("@q", q);
                return GetResponse("getCities");
            }
            #endregion
            
            #region places.getRegions
            /// <summary>Возвращает список регионов.</summary>
            /// <param name="country">идентификатор страны, полученный в методе places</param>
            /// <param name="q">строка поискового запроса</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getRegions(string country, string q) {
                manager.AddValueByName("@country", country);
                manager.AddValueByName("@q", q);
                return GetResponse("getRegions");
            }
            #endregion
            
            #region places.getCountryById
            /// <summary>Возвращает информацию о странах по их идентификаторам (</summary>
            /// <param name="cids">перечисленные через запятую ID стран</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getCountryById(string cids) {
                manager.AddValueByName("@cids", cids);
                return GetResponse("getCountryById");
            }
            #endregion
            
            #region places.getCityById
            /// <summary>Возвращает информацию о городах по их идентификаторам (</summary>
            /// <param name="cids">перечисленные через запятую ID городов</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getCityById(string cids) {
                manager.AddValueByName("@cids", cids);
                return GetResponse("getCityById");
            }
            #endregion
            
            #region places.getStreetById
            /// <summary>Возвращает информацию об улицах по их идентификаторам (</summary>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getStreetById() {
                return GetResponse("getStreetById");
            }
            #endregion
        }
    }
}
