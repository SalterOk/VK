using VK.VKTypes;
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VK {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public partial class VKApiManager {
        
        public class Newsfeed : VKAPIBranch {
            
            private const string API_BRANCH = "newsfeed.{0}";
            
            /// <summary>Создает объект класса <typeparamref name="Newsfeed"/>.</summary>
            public Newsfeed(bool needXml) : 
                    base(needXml) {
                API_URI_BASE_TEMPLATE = String.Format(API_URI_BASE, API_BRANCH);
            }
            
            #region newsfeed.get
            /// <summary>Возвращает данные, необходимые для показа списка новостей для текущего пользователя.</summary>
            /// <param name="source_ids">перечисленные через запятую иcточники новостей, новости от которых необходимо получить</param>
            /// <param name="filters">перечисленные через запятую названия списков новостей, которые необходимо получить</param>
            /// <param name="start_time">время, в формате unixtime, начиная с которого следует получить новости для текущего пользователя</param>
            /// <param name="end_time">время, в формате unixtime, до которого следует получить новости для текущего пользователя</param>
            /// <param name="offset">указывает, начиная с какого элемента в данном промежутке времени необходимо получить новости</param>
            /// <param name="from">значение, полученное в поле new_from при последней загруке новостей</param>
            /// <param name="count">указывает, какое максимальное число новостей следует возвращать, но не более 100</param>
            /// <param name="max_photos">Максимальное количество фотографий, информацию о которых необходимо вернуть</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			private VKResponseBase get(IdList source_ids, NewsFilter? filters, DateTime? start_time, DateTime? end_time, System.Int32? offset, string from, System.Int32? count, System.Int32? max_photos) {
                manager.AddValueByName("@source_ids", source_ids);
                manager.AddValueByName("@filters", filters);
                manager.AddValueByName("@start_time", start_time);
                manager.AddValueByName("@end_time", end_time);
                manager.AddValueByName("@offset", offset);
                manager.AddValueByName("@from", from);
                manager.AddValueByName("@count", count);
                manager.AddValueByName("@max_photos", max_photos);
                return new VKResponseBase(GetResponse("get"), IsXMLResponse);
            }
            
            /// <summary>Возвращает данные, необходимые для показа списка новостей для текущего пользователя.</summary>
            /// <param name="source_ids">перечисленные через запятую иcточники новостей, новости от которых необходимо получить</param>
            /// <param name="filters">перечисленные через запятую названия списков новостей, которые необходимо получить</param>
            /// <param name="start_time">время, в формате unixtime, начиная с которого следует получить новости для текущего пользователя</param>
            /// <param name="end_time">время, в формате unixtime, до которого следует получить новости для текущего пользователя</param>
            /// <param name="offset">указывает, начиная с какого элемента в данном промежутке времени необходимо получить новости</param>
            /// <param name="from">значение, полученное в поле new_from при последней загруке новостей</param>
            /// <param name="count">указывает, какое максимальное число новостей следует возвращать, но не более 100</param>
            /// <param name="max_photos">Максимальное количество фотографий, информацию о которых необходимо вернуть</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase Get(IdList source_ids = null, NewsFilter? filters = null, DateTime? start_time = null, DateTime? end_time = null, System.Int32? offset = null, string from = null, System.Int32? count = null, System.Int32? max_photos = null) {
                return get(source_ids, filters, start_time, end_time, offset, from, count, max_photos);
            }
            #endregion
            
            #region newsfeed.search
            /// <summary>Возвращает результаты поиска по статусам.</summary>
            /// <param name="q">Поисковой запрос, по которому необходимо получить результаты</param>
            /// <param name="count">указывает, какое максимальное число записей следует возвращать, но не более 100</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества результатов поиска</param>
            /// <param name="start_time">время, в формате unixtime, начиная с которого следует получить новости для текущего пользователя</param>
            /// <param name="end_time">время, в формате unixtime, до которого следует получить новости для текущего пользователя</param>
            /// <param name="start_id">Строковый id последней полученной записи</param>
            /// <param name="extended">указывается 1 если необходимо получить информацию о пользователе или группе, разместившей запись</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			private VKResponseBase search(string q, System.Int32? count, System.Int32? offset, DateTime? start_time, DateTime? end_time, System.Int32? start_id, System.Boolean? extended) {
                manager.AddValueByName("@q", q);
                manager.AddValueByName("@count", count);
                manager.AddValueByName("@offset", offset);
                manager.AddValueByName("@start_time", start_time);
                manager.AddValueByName("@end_time", end_time);
                manager.AddValueByName("@start_id", start_id);
                manager.AddValueByName("@extended", extended);
                return new VKResponseBase(GetResponse("search"), IsXMLResponse);
            }
            
            /// <summary>Возвращает результаты поиска по статусам.</summary>
            /// <param name="q">Поисковой запрос, по которому необходимо получить результаты</param>
            /// <param name="count">указывает, какое максимальное число записей следует возвращать, но не более 100</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества результатов поиска</param>
            /// <param name="start_time">время, в формате unixtime, начиная с которого следует получить новости для текущего пользователя</param>
            /// <param name="end_time">время, в формате unixtime, до которого следует получить новости для текущего пользователя</param>
            /// <param name="start_id">Строковый id последней полученной записи</param>
            /// <param name="extended">указывается 1 если необходимо получить информацию о пользователе или группе, разместившей запись</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase Search(string q, System.Int32? count = null, System.Int32? offset = null, DateTime? start_time = null, DateTime? end_time = null, System.Int32? start_id = null, System.Boolean? extended = null) {
                return search(q, count, offset, start_time, end_time, start_id, extended);
            }
            #endregion
            
            #region newsfeed.getBanned
            /// <summary>Возвращает список пользователей и групп, которые текущий пользователь скрыл из ленты новостей.</summary>
            /// <param name="extended">если этот параметр равен 1, возвращается дополнительная информация о пользователях и группах  </param>
            /// <param name="fields"> поля профилей, которые необходимо вернуть</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private VKResponseBase getBanned(System.Boolean? extended, ProfileFields? fields) {
                manager.AddValueByName("@extended", extended);
                manager.AddValueByName("@fields", fields);
                return new VKResponseBase(GetResponse("getBanned"), IsXMLResponse);
            }
            
            /// <summary>Возвращает список пользователей и групп, которые текущий пользователь скрыл из ленты новостей.</summary>
            /// <param name="fields"> поля профилей, которые необходимо вернуть</param>
            /// <param name="extended">если этот параметр равен 1, возвращается дополнительная информация о пользователях и группах  </param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase GetBanned(ProfileFields? fields = null, System.Boolean? extended = null) {
                return getBanned(extended, fields);
            }
            #endregion
            
            #region newsfeed.addBan
            /// <summary>Запрещает показывать новости от заданных пользователей и групп в ленте новостей текущего пользователя.</summary>
            /// <param name="uids">перечисленные через запятую идентификаторы друзей пользователя, новости от которых необходимо скрыть из ленты новостей текущего пользователя</param>
            /// <param name="gids">перечисленные через запятую идентификаторы групп пользователя, новости от которых необходимо скрыть из ленты новостей текущего пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			private VKResponseBase addBan(IdList uids, IdList gids) {
                manager.AddValueByName("@uids", uids);
                manager.AddValueByName("@gids", gids);
                return new VKResponseBase(GetResponse("addBan"), IsXMLResponse);
            }
            
            /// <summary>Запрещает показывать новости от заданных пользователей и групп в ленте новостей текущего пользователя.</summary>
            /// <param name="uids">перечисленные через запятую идентификаторы друзей пользователя, новости от которых необходимо скрыть из ленты новостей текущего пользователя</param>
            /// <param name="gids">перечисленные через запятую идентификаторы групп пользователя, новости от которых необходимо скрыть из ленты новостей текущего пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase AddBan(IdList uids, IdList gids = null) {
                return addBan(uids, gids);
            }
            
            /// <summary>Запрещает показывать новости от заданных пользователей и групп в ленте новостей текущего пользователя.</summary>
            /// <param name="gids">перечисленные через запятую идентификаторы групп пользователя, новости от которых необходимо скрыть из ленты новостей текущего пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase AddBan(IdList gids) {
                return addBan(null, gids);
            }
            #endregion
            
            #region newsfeed.deleteBan
            /// <summary>Разрешает показывать новости от заданных пользователей и групп в ленте новостей текущего пользователя.</summary>
            /// <param name="uids">перечисленные через запятую идентификаторы друзей пользователя, новости от которых необходимо вернуть в ленту новостей текущего пользователя</param>
            /// <param name="gids">перечисленные через запятую идентификаторы групп пользователя, новости от которых необходимо вернуть в ленту новостей текущего пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			private VKResponseBase deleteBan(IdList uids, IdList gids) {
                manager.AddValueByName("@uids", uids);
                manager.AddValueByName("@gids", gids);
                return new VKResponseBase(GetResponse("deleteBan"), IsXMLResponse);
            }
            
            /// <summary>Разрешает показывать новости от заданных пользователей и групп в ленте новостей текущего пользователя.</summary>
            /// <param name="uids">перечисленные через запятую идентификаторы друзей пользователя, новости от которых необходимо вернуть в ленту новостей текущего пользователя</param>
            /// <param name="gids">перечисленные через запятую идентификаторы групп пользователя, новости от которых необходимо вернуть в ленту новостей текущего пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase DeleteBan(IdList uids, IdList gids = null) {
                return deleteBan(uids, gids);
            }
            
            /// <summary>Разрешает показывать новости от заданных пользователей и групп в ленте новостей текущего пользователя.</summary>
            /// <param name="gids">перечисленные через запятую идентификаторы групп пользователя, новости от которых необходимо вернуть в ленту новостей текущего пользователя</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase DeleteBan(IdList gids) {
                return deleteBan(null, gids);
            }
            #endregion
        }
    }
}
