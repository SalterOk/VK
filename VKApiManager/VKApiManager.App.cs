//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VK {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public partial class VKApiManager {
        
        public class App : VKAPIBranch {
            
            private const string API_BRANCH = "app.{0}";
            
            /// <summary>Создает объект класса <typeparamref name="App"/>.</summary>
            public App(bool needXml) : 
                    base(needXml) {
                API_URI_BASE_TEMPLATE = String.Format(API_URI_BASE, API_BRANCH);
            }
            
            #region getVariable
            /// <summary>Возвращает значение переменной, номер которой задан в параметре key (</summary>
            /// <param name="key">Ключ от 0 до 4095, идентификатор переменной</param>
            /// <param name="user_id">id пользователя, переменная которого считывается (если идёт обращение к переменным user_vars с ключами от 1280 до 1791)</param>
            /// <param name="session">целочисленный идентификатор сеанса (комнаты)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getVariable(string key, string user_id, string session) {
                manager.AddValueByName("@key", key);
                manager.AddValueByName("@user_id", user_id);
                manager.AddValueByName("@session", session);
                return GetResponse("getVariable", true);
            }
            #endregion
            
            #region getVariables
            /// <summary>Возвращает список значений диапазона переменных, заданного с помощью входных параметров</summary>
            /// <param name="key">Ключ от 0 до 4095, идентификатор первой переменной</param>
            /// <param name="count">Значение от 1 до 32, количество переменных</param>
            /// <param name="user_id">id пользователя, переменные которого считываются (если идёт обращение к переменным user_vars с ключами от 1280 до 1791)</param>
            /// <param name="session">целочисленный идентификатор сеанса (комнаты)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getVariables(string key, System.Int32? count, string user_id, string session) {
                manager.AddValueByName("@key", key);
                manager.AddValueByName("@count", count);
                manager.AddValueByName("@user_id", user_id);
                manager.AddValueByName("@session", session);
                return GetResponse("getVariables", true);
            }
            #endregion
            
            #region putVariable
            /// <summary>Помещает в переменную, номер которой задан в параметре key (</summary>
            /// <param name="key">Ключ от 0 до 4095, идентификатор переменной</param>
            /// <param name="value">Значение, которое нужно записать в переменную</param>
            /// <param name="user_id">id пользователя, переменная которого записывается (если идёт обращение к общедоступным переменным user_vars с ключами от 1504 до 1567)</param>
            /// <param name="session">целочисленный идентификатор сеанса (комнаты)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string putVariable(string key, string value, string user_id, string session) {
                manager.AddValueByName("@key", key);
                manager.AddValueByName("@value", value);
                manager.AddValueByName("@user_id", user_id);
                manager.AddValueByName("@session", session);
                return GetResponse("putVariable", true);
            }
            #endregion
            
            #region getHighScores
            /// <summary>Вместе с</summary>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getHighScores() {
                return GetResponse("getHighScores", true);
            }
            #endregion
            
            #region setUserScore
            /// <summary>Вместе с</summary>
            /// <param name="score">рекорд пользователя для записи</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string setUserScore(string score) {
                manager.AddValueByName("@score", score);
                return GetResponse("setUserScore", true);
            }
            #endregion
            
            #region getMessages
            /// <summary>Вместе с</summary>
            /// <param name="messages_to_get">количество сообщений, которые будут получены (если параметр не указан, возвращаются все непрочитанные сообщения)</param>
            /// <param name="session">целочисленный идентификатор сеанса (комнаты); если этот параметр не указан, то по умолчанию возвращаются сообщения из комнаты с идентификатором 0</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getMessages(string messages_to_get, string session) {
                manager.AddValueByName("@messages_to_get", messages_to_get);
                manager.AddValueByName("@session", session);
                return GetResponse("getMessages", true);
            }
            #endregion
            
            #region sendMessage
            /// <summary>Вместе с</summary>
            /// <param name="message">сообщение, введенное пользователем</param>
            /// <param name="session">целочисленный идентификатор сеанса (комнаты); если этот параметр не указан, то по умолчанию сообщение отправляется в комнату с идентификатором 0</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string sendMessage(string message, string session) {
                manager.AddValueByName("@message", message);
                manager.AddValueByName("@session", session);
                return GetResponse("sendMessage", true);
            }
            #endregion
            
            #region getServerTime
            /// <summary>Возвращает текущее время на сервере</summary>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getServerTime() {
                return GetResponse("getServerTime", true);
            }
            #endregion
            
            #region setNameInMenu
            /// <summary>Устанавливает короткое название приложения (до 17 символов), которое выводится пользователю в левом меню. Это происходит только в том случае, если пользователь добавил приложение в левое меню со страницы приложения,</summary>
            /// <param name="name">короткое название приложения для левого меню, до 17 символов в формате UTF</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string setNameInMenu(string name) {
                manager.AddValueByName("@name", name);
                return GetResponse("setNameInMenu", true);
            }
            #endregion
        }
    }
}
