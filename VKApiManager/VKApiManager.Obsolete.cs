//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VK {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public partial class VKApiManager {
        
        public class Obsolete : VKAPIBranch {
            
            private const string API_BRANCH = "obsolete.{0}";
            
            /// <summary>Создает объект класса <typeparamref name="Obsolete"/>.</summary>
            public Obsolete(bool needXml) : 
                    base(needXml) {
                API_URI_BASE_TEMPLATE = String.Format(API_URI_BASE, API_BRANCH);
            }
            
            #region getUserInfo
            /// <summary>Возвращает</summary>
            /// <param name="api_id">идентификатор приложения, присваивается при создании</param>
            /// <param name="sig">подпись запроса по стандартной схеме</param>
            /// <param name="v">версия API, текущая версия равна 2</param>
            /// <param name="format">формат возвращаемых данных – XML или JSON</param>
            /// <param name="test_mode">если этот параметр равен 1, разрешает тестовые запросы к данным приложения</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getUserInfo(string api_id, string sig, string v, string format, string test_mode) {
                manager.AddValueByName("@api_id", api_id);
                manager.AddValueByName("@sig", sig);
                manager.AddValueByName("@v", v);
                manager.AddValueByName("@format", format);
                manager.AddValueByName("@test_mode", test_mode);
                return GetResponse("getUserInfo", true);
            }
            #endregion
            
            #region getUserInfoEx
            /// <summary>Возвращает расширенную информацию о текущем пользователе, которая включает в себя его id, имя, пол, день рождения, город и фотографию.</summary>
            /// <param name="api_id">идентификатор приложения, присваивается при создании</param>
            /// <param name="sig">подпись запроса по стандартной схеме</param>
            /// <param name="v">версия API, текущая версия равна 2</param>
            /// <param name="format">формат возвращаемых данных – XML или JSON</param>
            /// <param name="test_mode">если этот параметр равен 1, разрешает тестовые запросы к данным приложения</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getUserInfoEx(string api_id, string sig, string v, string format, string test_mode) {
                manager.AddValueByName("@api_id", api_id);
                manager.AddValueByName("@sig", sig);
                manager.AddValueByName("@v", v);
                manager.AddValueByName("@format", format);
                manager.AddValueByName("@test_mode", test_mode);
                return GetResponse("getUserInfoEx", true);
            }
            #endregion
            
            #region activity.get
            /// <summary>Возвращает последнюю запись пользователя, которую он опубликовал на своей стене.</summary>
            /// <param name="uid">идентификатор пользователя (по умолчанию - текущий пользователь)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string get(System.Int64? uid) {
                manager.AddValueByName("@uid", uid);
                return GetResponse("get");
            }
            #endregion
            
            #region activity.set
            /// <summary>Добавляет текстовое сообщение на стену текущего пользователя.</summary>
            /// <param name="text">текст сообщения</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string set(string text) {
                manager.AddValueByName("@text", text);
                return GetResponse("set");
            }
            #endregion
            
            #region activity.getHistory
            /// <summary>Возвращает записи со стены указанного пользователя, которые были написаны им самим.</summary>
            /// <param name="uid">идентификатор пользователя (по умолчанию - текущий пользователь)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getHistory(System.Int64? uid) {
                manager.AddValueByName("@uid", uid);
                return GetResponse("getHistory");
            }
            #endregion
            
            #region activity.getNews
            /// <summary>Возвращает обновления записей пользователей, опубликованных ими на собственных стенах.</summary>
            /// <param name="timestamp">будут возвращены записи, которые были созданы не раньше этого времени (unixtime)</param>
            /// <param name="offset">смещение, необходимое для выборки определенного подмножества записей</param>
            /// <param name="count">количество записей, которое необходимо получить (но не более 100)</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getNews(string timestamp, System.Int32? offset, System.Int32? count) {
                manager.AddValueByName("@timestamp", timestamp);
                manager.AddValueByName("@offset", offset);
                manager.AddValueByName("@count", count);
                return GetResponse("getNews");
            }
            #endregion
            
            #region secure.saveAppStatus
            /// <summary>Сохраняет строку статуса приложения для его последующего вывода в общем списке приложений на странице пользователя. Размер строки статуса ограничен</summary>
            /// <param name="timestamp">UNIX-time сервера</param>
            /// <param name="random">любое случайное число для обеспечения уникальности запроса </param>
            /// <param name="uid">ID пользователя, которому записывается статус</param>
            /// <param name="status">текст статуса, ограниченный 32 символами</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string saveAppStatus(string timestamp, string random, System.Int64? uid, string status) {
                manager.AddValueByName("@timestamp", timestamp);
                manager.AddValueByName("@random", random);
                manager.AddValueByName("@uid", uid);
                manager.AddValueByName("@status", status);
                return GetResponse("saveAppStatus");
            }
            #endregion
            
            #region secure.getAppStatus
            /// <summary>Возвращает строку статуса приложения, сохраненного с помощью метода</summary>
            /// <param name="timestamp">UNIX-time сервера</param>
            /// <param name="random">любое случайное число для обеспечения уникальности запроса </param>
            /// <param name="uid">ID пользователя, статус которого необходимо получить</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getAppStatus(string timestamp, string random, System.Int64? uid) {
                manager.AddValueByName("@timestamp", timestamp);
                manager.AddValueByName("@random", random);
                manager.AddValueByName("@uid", uid);
                return GetResponse("getAppStatus");
            }
            #endregion
        }
    }
}
