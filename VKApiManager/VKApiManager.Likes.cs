//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VK {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public partial class VKApiManager {
        
        public class Likes : VKAPIBranch {
            
            private const string API_BRANCH = "likes.{0}";
            
            /// <summary>Создает объект класса <typeparamref name="Likes"/>.</summary>
            public Likes(bool needXml) : 
                    base(needXml) {
                API_URI_BASE_TEMPLATE = String.Format(API_URI_BASE, API_BRANCH);
            }
            
            #region likes.add
            /// <summary>Добавляет указанный объект в список</summary>
            /// <param name="owner_id">идентификатор владельца Like-объекта</param>
            /// <param name="type">идентификатор типа Like-объекта</param>
            /// <param name="item_id">идентификатор Like-объекта</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string add(System.Int64? owner_id, string type, string item_id) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@type", type);
                manager.AddValueByName("@item_id", item_id);
                return GetResponse("add");
            }
            #endregion
            
            #region likes.delete
            /// <summary>Удаляет указанный объект из списка</summary>
            /// <param name="owner_id">идентификатор владельца Like-объекта</param>
            /// <param name="type">идентификатор типа Like-объекта</param>
            /// <param name="item_id">идентификатор Like-объекта</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string delete(System.Int64? owner_id, string type, string item_id) {
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@type", type);
                manager.AddValueByName("@item_id", item_id);
                return GetResponse("delete");
            }
            #endregion
            
            #region likes.getList
            /// <summary>Получает список идентификаторов пользователей, которые добавили заданный объект в свой список</summary>
            /// <param name="type">тип Like-объекта</param>
            /// <param name="owner_id">идентификатор владельца Like-объекта (id пользователя или id приложения)</param>
            /// <param name="item_id">идентификатор Like-объекта</param>
            /// <param name="page_url">url страницы, на которой установлен виджет «Мне нравится»</param>
            /// <param name="filter">указывает, следует ли вернуть всех пользователей, добавивших объект в список &quot;Мне нравится&quot; или только тех, которые рассказали о нем друзьям</param>
            /// <param name="friends_only">указывает, необходимо ли возвращать только пользователей, которые являются друзьями текущего пользователя</param>
            /// <param name="offset">смещение, относительно начала списка, для выборки определенного подмножества</param>
            /// <param name="count">количество возвращаемых идентификаторов пользователей</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string getList(string type, System.Int64? owner_id, string item_id, string page_url, Filter filter, bool? friends_only, System.Int32? offset, System.Int32? count) {
                manager.AddValueByName("@type", type);
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@item_id", item_id);
                manager.AddValueByName("@page_url", page_url);
                manager.AddValueByName("@filter", filter);
                manager.AddValueByName("@friends_only", friends_only);
                manager.AddValueByName("@offset", offset);
                manager.AddValueByName("@count", count);
                return GetResponse("getList");
            }
            #endregion
            
            #region likes.isLiked
            /// <summary>Проверяет находится ли объект в списке</summary>
            /// <param name="user_id">идентификатор пользователя у которого необходимо проверить наличие объекта в списке Мне нравится</param>
            /// <param name="owner_id">идентификатор владельца Like-объекта</param>
            /// <param name="type">идентификатор типа Like-объекта</param>
            /// <param name="item_id">идентификатор Like-объекта</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private string isLiked(string user_id, System.Int64? owner_id, string type, string item_id) {
                manager.AddValueByName("@user_id", user_id);
                manager.AddValueByName("@owner_id", owner_id);
                manager.AddValueByName("@type", type);
                manager.AddValueByName("@item_id", item_id);
                return GetResponse("isLiked");
            }
            #endregion
        }
    }
}
