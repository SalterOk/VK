//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VK {
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    
    public partial class VKApiManager {
        
        public class Account : VKAPIBranch {
            
            private const string API_BRANCH = "account.{0}";
            
            /// <summary>Создает объект класса <typeparamref name="Account"/>.</summary>
            public Account(bool needXml) : 
                    base(needXml) {
                API_URI_BASE_TEMPLATE = String.Format(API_URI_BASE, API_BRANCH);
            }
            
            #region account.importContacts
            /// <summary>Принимает список контактов пользователя для поиска зарегистрированных во ВКонтакте пользователей методом</summary>
            /// <param name="contacts">список телефонов или email адресов друзей пользователя, указанных через запятую</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
			private VKResponseBase importContacts(ImportId contacts) {
                manager.AddValueByName("@contacts", contacts);
                return new VKResponseBase(GetResponse("importContacts"), IsXMLResponse);
            }
            
            /// <summary>Принимает список контактов пользователя для поиска зарегистрированных во ВКонтакте пользователей методом</summary>
            /// <param name="contacts">список телефонов или email адресов друзей пользователя, указанных через запятую</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase ImportContacts(ImportId contacts) {
                return importContacts(contacts);
            }
            #endregion
            
            #region account.registerDevice
            /// <summary>Подписывает устройство на базе iOS или Android на получение Push-уведомлений.</summary>
            /// <param name="token">Идентификатор устройства, используемый для отправки уведомлений</param>
            /// <param name="device_model">Строковое название модели устройства</param>
            /// <param name="system_version">Строковая версия операционной системы устройства</param>
            /// <param name="no_text">1 - Не передавать текст сообщения в push уведомлении</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private VKResponseBase registerDevice(string token, string device_model, string system_version, string no_text) {
                manager.AddValueByName("@token", token);
                manager.AddValueByName("@device_model", device_model);
                manager.AddValueByName("@system_version", system_version);
                manager.AddValueByName("@no_text", no_text);
                return new VKResponseBase(GetResponse("registerDevice"), IsXMLResponse);
            }
            #endregion
            
            #region account.unregisterDevice
            /// <summary>Отписывает устройство от Push уведомлений.</summary>
            /// <param name="token">Идентификатор устройства, использованный в методе account</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private VKResponseBase unregisterDevice(string token) {
                manager.AddValueByName("@token", token);
                return new VKResponseBase(GetResponse("unregisterDevice"), IsXMLResponse);
            }
            #endregion
            
            #region account.setSilenceMode
            /// <summary>Отключает звук в параметрах отправляемых push-уведомлений на заданный промежуток времени.</summary>
            /// <param name="token">Идентификатор устройства, использованный в методе account</param>
            /// <param name="time">Количество секунд, в течение которых уведомления будут приходить без звука</param>
            /// <param name="uid">ID пользователя для сообщений от которого применяется данная настройка</param>
            /// <param name="chat_id">ID беседы, к которой будет относится данная настройка</param>
            /// <param name="sound">Использовать ли звук при оповещении</param>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private VKResponseBase setSilenceMode(string token, string time, System.Int64? uid, string chat_id, string sound) {
                manager.AddValueByName("@token", token);
                manager.AddValueByName("@time", time);
                manager.AddValueByName("@uid", uid);
                manager.AddValueByName("@chat_id", chat_id);
                manager.AddValueByName("@sound", sound);
                return new VKResponseBase(GetResponse("setSilenceMode"), IsXMLResponse);
            }
            #endregion
            
            #region account.setOnline
            /// <summary>Помечает текущего пользователя как online на 15 минут.</summary>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            private VKResponseBase setOnline() {
                return new VKResponseBase(GetResponse("setOnline"), IsXMLResponse);
            }
            
            /// <summary>Помечает текущего пользователя как online на 15 минут.</summary>
            /// <returns>Ответ сервера в XML или JSON формате.</returns>
            public VKResponseBase SetOnline() {
                return setOnline();
            }
            #endregion
        }
    }
}
